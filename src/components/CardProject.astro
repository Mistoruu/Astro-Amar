---
type TechnologyIcon =
  | "astro"
  | "html"
  | "javascript"
  | "css"
  | "typescript"
  | "python";

interface Technology {
  icon: TechnologyIcon;
}

// Fonction pour obtenir l'URL de l'icône
const getIconComponent = (icon: TechnologyIcon): string | null => {
  const iconMap: Record<TechnologyIcon, string> = {
    astro: "../../public/Assets/ico-Astro.png",
    html: "../../public/Assets/ico-HTML.png",
    css: "../../public/Assets/ico-CSS.png",
    javascript: "../../public/Assets/ico-JS.png",
    typescript: "../../public/Assets/ico-TS.png",
    python: "../../public/Assets/ico-python.png",
  };

  return iconMap[icon] || null;
};

export interface Props {
  title: string;
  img: string;
  description: string;
  technologies: Technology[];
  link: string;
}

// Récupération des props
const { title, img, description, technologies, link } = Astro.props as Props;
---

<ul class="ul-projects">
  <li class="li-projects">
    <img src={img} alt={title} loading="lazy" />
    <p class="title-project">{title}</p>
    <p class="description-project">{description}</p>
    <div class="container-technologies">
      {
        technologies.map(({ icon }) => {
          const iconUrl = getIconComponent(icon);
          return <i>{iconUrl && <img src={iconUrl} alt={icon} />}</i>;
        })
      }
    </div>
    <a href={link} class="project-link">Voir le projet</a>
  </li>
</ul>
